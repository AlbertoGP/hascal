// token struct
struct token {
    var type : string
    var value : string
    var line : int
}

// token types
var NAME = "NAME"
var NUMBER = "NUMBER"
var STRING = "STRING"
var BOOLEAN = "BOOLEAN"
var VAR = "VAR"
var FUNCTION = "FUNCTION"
var OPERATOR = "OPERATOR"
var COLON = "COLON"
var LBRACKET = "LBRACKET"
var RBRACKET = "RBRACKET"
var LPAREN = "LPAREN"
var RPAREN = "RPAREN"
var COMMA = "COMMA"
var LBRACE = "LBRACE"
var RBRACE = "RBRACE"

var lexme = ""
var current = 0
var source = ""
var line = 1

var tokens : [token]

// this function is used to check if the current character is at the end of the string
function isAtEnd() : bool {
    if current >= len(source) {
        return true
    }
    return false
}

function advance() : char{
    current = current + 1
    return source[current]
}

function scan_token(){
    var c = advance()
    var tok : token

    if c == ' ' {
        scan_token()
    } else if c == '\n' {
        line = line + 1
    } else if c == '(' {
        tok = [LPAREN,"(",line]
        append(tokens,tok)
    } else if c == ')' {
        tok = [RPAREN,")",line]
        append(tokens,tok)
    } 
}
function tokenizer(src:string): [token] {
    source = src
    while isAtEnd() == false {
        scan_token()
    }
    return tokens
}
